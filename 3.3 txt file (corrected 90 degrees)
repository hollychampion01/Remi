#include "global.hpp"
#include "Motor.hpp"
#include "Encoder.hpp"
#include "PIDController.hpp"
#include "lidar.hpp"
#include "mpu.hpp"
#include "wallDetect.hpp"
#include "movement.hpp"
#include "wallFollow.hpp"

// Motor 1 (left)
#define MOT1PWM 11
#define MOT1DIR 12
#define MOT1_ENCA 2
#define MOT1_ENCB 6

// Motor 2 (right)
#define MOT2PWM 9
#define MOT2DIR 10
#define MOT2_ENCA 3
#define MOT2_ENCB 7

#define SDA A4
#define SCL A5

// Motors and encoders
mtrn3100::Motor motor1(MOT1PWM, MOT1DIR);
mtrn3100::Encoder encoder1(MOT1_ENCA, MOT1_ENCB);
mtrn3100::Motor motor2(MOT2PWM, MOT2DIR);
mtrn3100::Encoder encoder2(MOT2_ENCA, MOT2_ENCB);

// Controllers (not used directly here, but kept for completeness)
mtrn3100::PIDController controller1(150.0, 10.0, 5.0);
mtrn3100::PIDController controller2(150.0, 10.0, 5.0);

// Distance PID Controller for front lidar
mtrn3100::PIDController distanceController(2.0, 0.0, 0.0);  // Kp, Ki, Kd for distance control

// Angle PID Controller for rotation control (tuned for stability)
mtrn3100::PIDController angleController(2.0, 0.0, 0.0);  // Reduced gains to prevent oscillation

// Store initial angle
float initialAngle = 0.0;
size_t currentCommandIndex = 0;
bool commandInProgress = false;
unsigned long lastCommandTime = 0;
const float forwardSpeed = 70.0f;
float encoder1Start = 0.0;
float encoder2Start = 0.0;

// Wall follow controller
mtrn3100::WallFollow wallFollow(MOT1PWM, MOT1DIR, MOT2PWM, MOT2DIR, 20.0f, 5.0f, 2.0f);

void setup() {
    Serial.begin(9600);
    Wire.begin();
    while (!Serial);  // Wait for Serial (if needed)

    Serial.println("Setup starting...");

    setupMPU();           // Initializes MPU
    initializeLidars();   // Initializes LIDARs
    controller1.zeroAndSetTarget(encoder1.getRotation(), 0.0);
    controller2.zeroAndSetTarget(encoder2.getRotation(), 0.0);
    
    // Initialize distance PID controller with target distance of 100mm
    distanceController.zeroAndSetTarget(0, 100.0);  // Target 100mm from front wall

    wallFollow.begin();   // Start the wall follow behavior

    Serial.println("Setup done.");
}

// Add at top of file
bool shouldMoveForward = false;
float angleError(float current, float target) {
    float error = target - current;
    while (error > 180.0f) error -= 360.0f;
    while (error < -180.0f) error += 360.0f;
    return error;
}

void loop() {
    mpu.update();
    updateLidars();
    currAngle = mpu.getAngleZ();

    static float targetAngle = 0.0;
    static unsigned long lastDisplayUpdate = 0;
    unsigned long now = millis();

    if (currentCommandIndex < comm.length()) {
        char cmd = comm.charAt(currentCommandIndex);

        if (!commandInProgress) {
            Serial.print("Executing command: ");
            Serial.println(cmd);

            if (cmd == 'l') {
                targetAngle = currAngle + 90.0;
                commandInProgress = true;
            } else if (cmd == 'r') {
                targetAngle = currAngle - 90.0;
                commandInProgress = true;
            } else if (cmd == 'f') {
                encoder1Start = encoder1.getDistanceMM();
                encoder2Start = encoder2.getDistanceMM();
                motor1.setPWM(forwardSpeed);
                motor2.setPWM(-forwardSpeed);
                commandInProgress = true;
            } else {
                Serial.print("Unknown command: ");
                Serial.println(cmd);
                currentCommandIndex++;  // Skip unknown
            }
        }

        // Turn left
        if (commandInProgress && cmd == 'l') {
            if (angleError(currAngle, targetAngle) > 3.0f) {
                motor1.setPWM(forwardSpeed * 0.5);
                motor2.setPWM(forwardSpeed * 0.5);
            } else {
                motor1.setPWM(0);
                motor2.setPWM(0);
                commandInProgress = false;
                currentCommandIndex++;
            }
        }

        // Turn right
        else if (commandInProgress && cmd == 'r') {
            if (angleError(currAngle, targetAngle) < -3.0f) {
                motor1.setPWM(-forwardSpeed * 0.5);
                motor2.setPWM(-forwardSpeed * 0.5);
            } else {
                motor1.setPWM(0);
                motor2.setPWM(0);
                commandInProgress = false;
                currentCommandIndex++;
            }
        }

        // Move forward
        else if (commandInProgress && cmd == 'f') {
            float rawDistance = encoder2Start - encoder2.getDistanceMM();  // positive increasing distance

            if (now - lastDisplayUpdate >= 100) {
                Serial.print("Raw Distance (Encoder2): ");
                Serial.println(rawDistance, 1);
                Serial.print("Encoder2.get(): ");
                Serial.print(encoder2.getDistanceMM(), 1);
                Serial.print(" | Start: ");
                Serial.println(encoder2Start, 1);
                Serial.print("Encoder1 (mm): ");
                Serial.println(encoder1.getDistanceMM(), 1);
                Serial.print("Encoder2 (mm): ");
                Serial.println(encoder2.getDistanceMM(), 1);
                lastDisplayUpdate = now;
            }

            if (distFront < 105.00) {
                motor1.setPWM(0);
                motor2.setPWM(0);
                commandInProgress = false;
                currentCommandIndex++;
                if (currentCommandIndex > comm.length()) {
                    motor1.setPWM(0);
                    motor2.setPWM(0);
                }
            }

            if (rawDistance < 1800.0f) {
                motor1.setPWM(forwardSpeed);
                motor2.setPWM(-forwardSpeed);
            } else {
                motor1.setPWM(0);
                motor2.setPWM(0);
                commandInProgress = false;
                currentCommandIndex++;
            }
        } else {
            if (now - lastDisplayUpdate >= 500) {  // Idle update slower
                lastDisplayUpdate = now;
            }
        }

        printLidarReadings();
    }
}
